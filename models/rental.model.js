import supabase from '../db/supabaseClient.js';
import RentalStatusHistoryModel from './rentalStatusHistory.model.js';
import { ApiError } from '../utils/apiError.js';
import httpStatusCodes from '../constants/httpStatusCodes.js';

const RentalModel = {
    async create(rentalData) {
        const { renter_id, product_id, owner_id, start_date, end_date, ...otherData } = rentalData;
        
        const { data, error } = await supabase
            .from('rentals')
            .insert({
                renter_id,
                product_id,
                owner_id,
                start_date,
                end_date,
                ...otherData
                // rental_uid is generated by DB default
                // created_at, updated_at are handled by DB default/trigger
            })
            .select(`
                *,
                product:products(title, slug, primary_image:product_images(image_url)),
                renter:users!fk_rentals_renter(first_name, email),
                owner:users!fk_rentals_owner(first_name, email),
                delivery_address:user_addresses(*, province:provinces (id, name_th))
            `)
            .eq('product.primary_image.is_primary', true) // Ensure primary image subquery is filtered
            .single();

        if (error) {
            console.error("Error creating rental:", error);
            throw error;
        }
        
        // Post-process to ensure primary_image is an object or null
        if (data && data.product && data.product.primary_image && data.product.primary_image.length > 0) {
            data.product.primary_image = data.product.primary_image[0];
        } else if (data && data.product) {
            data.product.primary_image = { image_url: null };
        }

        // Log initial status
        if (data) {
            await RentalStatusHistoryModel.create(data.id, data.rental_status, renter_id, "Rental request created.");
        }

        return data;
    },

    async findByIdentifier(rentalIdOrUid) {
        // Check if it's a UUID or numeric ID
        const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(rentalIdOrUid);
        
        let query = supabase
            .from('rentals')
            .select(`
                *,
                product:products(title, slug, primary_image:product_images(image_url)),
                renter:users!fk_rentals_renter(first_name, email),
                owner:users!fk_rentals_owner(first_name, email),
                delivery_address:user_addresses(*, province:provinces (id, name_th))
            `)
            .eq('product.primary_image.is_primary', true);

        if (isUuid) {
            query = query.eq('rental_uid', rentalIdOrUid);
        } else {
            query = query.eq('id', parseInt(rentalIdOrUid));
        }

        const { data, error } = await query.single();

        if (error) {
            if (error.code === 'PGRST116') {
                return null; // Not found
            }
            console.error("Error finding rental by identifier:", error);
            throw error;
        }

        // Post-process to ensure primary_image is an object or null
        if (data && data.product && data.product.primary_image && data.product.primary_image.length > 0) {
            data.product.primary_image = data.product.primary_image[0];
        } else if (data && data.product) {
            data.product.primary_image = { image_url: null };
        }

        return data;
    },

    async findForUser(userId, userRole, filters = {}) {
        const { status, q, date_from, date_to, page = 1, limit = 10 } = filters;
        
        let query = supabase
            .from('rentals')
            .select(`
                *,
                product:products(title, slug, primary_image:product_images(image_url)),
                renter:users!fk_rentals_renter(first_name, email),
                owner:users!fk_rentals_owner(first_name, email),
                delivery_address:user_addresses(*, province:provinces (id, name_th))
            `, { count: 'exact' })
            .eq('product.primary_image.is_primary', true);

        // Filter by user role
        if (userRole === 'owner') {
            query = query.eq('owner_id', userId);
        } else if (userRole === 'renter') {
            query = query.eq('renter_id', userId);
        }

        // Apply status filter
        if (status) {
            if (Array.isArray(status)) {
                query = query.in('rental_status', status);
            } else {
                query = query.eq('rental_status', status);
            }
        }

        // Apply date range filters
        if (date_from) {
            query = query.gte('start_date', date_from);
        }
        if (date_to) {
            query = query.lte('start_date', date_to);
        }

        // Apply search filter (search in product title)
        if (q) {
            query = query.ilike('product.title', `%${q}%`);
        }

        // Apply pagination
        const offset = (page - 1) * limit;
        query = query.range(offset, offset + limit - 1);

        // Order by created_at descending
        query = query.order('created_at', { ascending: false });

        const { data, error, count } = await query;

        if (error) {
            console.error("Error finding rentals for user:", error);
            throw error;
        }

        // Post-process to ensure primary_image is an object or null
        if (data) {
            data.forEach(rental => {
                if (rental.product && rental.product.primary_image && rental.product.primary_image.length > 0) {
                    rental.product.primary_image = rental.product.primary_image[0];
                } else if (rental.product) {
                    rental.product.primary_image = { image_url: null };
                }
            });
        }

        return {
            data: data || [],
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total: count || 0,
                totalPages: Math.ceil((count || 0) / limit)
            }
        };
    },

    async update(rentalId, updateData) {
        const { data, error } = await supabase
            .from('rentals')
            .update({
                ...updateData,
                updated_at: new Date().toISOString()
            })
            .eq('id', rentalId)
            .select(`
                *,
                product:products(title, slug, primary_image:product_images(image_url)),
                renter:users!fk_rentals_renter(first_name, email),
                owner:users!fk_rentals_owner(first_name, email),
                delivery_address:user_addresses(*, province:provinces (id, name_th))
            `)
            .eq('product.primary_image.is_primary', true)
            .single();

        if (error) {
            console.error("Error updating rental:", error);
            throw error;
        }

        // Post-process to ensure primary_image is an object or null
        if (data && data.product && data.product.primary_image && data.product.primary_image.length > 0) {
            data.product.primary_image = data.product.primary_image[0];
        } else if (data && data.product) {
            data.product.primary_image = { image_url: null };
        }

        return data;
    },

    // Find methods for Owner/Renter dashboards will be added in Day 4
    async findByIdAndOwner(rentalId, ownerId) { /* ... For Day 4 ... */ },
    async findByIdAndRenter(rentalId, renterId) { /* ... For Day 4 ... */ },
    async updateStatus(rentalId, statusData, userId, userRole = 'system') { /* ... For Day 4 ... */ }
};

export default RentalModel; 