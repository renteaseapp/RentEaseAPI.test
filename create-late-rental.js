import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function createLateRental() {
  console.log('Creating test rental with late return for testing...\n');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô (‡πÄ‡∏°‡∏∑‡πà‡∏≠ 3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
    const today = new Date();
    const startDate = new Date(today);
    startDate.setDate(today.getDate() - 10); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πà‡∏≤ 10 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    
    const endDate = new Date(today);
    endDate.setDate(today.getDate() - 3); // ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ 3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß)
    
    const testRentalData = {
      renter_id: 39,  // user ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      owner_id: 33,   // owner ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      product_id: 56, // product ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      rental_status: 'active', // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô active ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ scheduler ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô late_return
      start_date: startDate.toISOString().slice(0, 10),
      end_date: endDate.toISOString().slice(0, 10),
      rental_price_per_day_at_booking: 100.00,
      security_deposit_at_booking: 500.00, // ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
      calculated_subtotal_rental_fee: 700.00,
      delivery_fee: 50.00,
      platform_fee_renter: 75.00,
      platform_fee_owner: 63.00,
      total_amount_due: 825.00,
      final_amount_paid: 825.00,
      pickup_method: 'delivery',
      return_method: 'delivery',
      payment_status: 'paid',
      payment_verified_at: startDate.toISOString(),
      actual_pickup_time: startDate.toISOString(),
      return_condition_status: null,
      created_at: startDate.toISOString(),
      updated_at: new Date().toISOString()
    };
    
    console.log('1. Creating test rental with overdue return...');
    console.log('Start date:', testRentalData.start_date);
    console.log('End date (overdue):', testRentalData.end_date);
    console.log('Days overdue:', Math.ceil((today - endDate) / (1000 * 60 * 60 * 24)));
    
    const { data: newRental, error: rentalError } = await supabase
      .from('rentals')
      .insert([testRentalData])
      .select()
      .single();
    
    if (rentalError) {
      console.log('‚ùå Error creating test rental:', rentalError);
      return null;
    }
    
    console.log('‚úÖ Test rental created successfully!');
    console.log('Rental ID:', newRental.id);
    console.log('Rental UID:', newRental.rental_uid);
    console.log('Status:', newRental.rental_status);
    
    return newRental;
    
  } catch (error) {
    console.error('‚ùå Error in createLateRental:', error);
    return null;
  }
}

async function main() {
  const rental = await createLateRental();
  if (rental) {
    console.log('\nüéâ Test rental created! Now run the scheduler to update status to late_return');
    console.log('Run: npm run test-scheduler');
  }
  process.exit(0);
}

main();