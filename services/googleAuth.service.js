import { OAuth2Client } from 'google-auth-library';
import UserModel from '../models/user.model.js';
import { generateToken } from '../utils/jwt.utils.js';
import { ApiError } from '../utils/apiError.js';
import httpStatusCodes from '../constants/httpStatusCodes.js';
import googleConfig from '../config/google.config.js';
import { hashPassword } from '../utils/password.utils.js';

// Validate Google config
if (!googleConfig.clientId || !googleConfig.clientSecret) {
    console.error('‚ùå Google OAuth configuration missing. Please check your environment variables:');
    console.error('   GOOGLE_CLIENT_ID:', googleConfig.clientId ? 'Set' : 'Missing');
    console.error('   GOOGLE_CLIENT_SECRET:', googleConfig.clientSecret ? 'Set' : 'Missing');
}

const googleAuthService = {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Google OAuth URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login
    getAuthUrl() {
        const oauth2Client = new OAuth2Client(
            googleConfig.clientId,
            googleConfig.clientSecret,
            googleConfig.redirectUri
        );

        const authUrl = oauth2Client.generateAuthUrl({
            access_type: 'offline',
            scope: googleConfig.scopes,
            prompt: 'consent'
        });

        return authUrl;
    },

    // ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorization code ‡πÄ‡∏õ‡πá‡∏ô access token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    async handleCallback(code) {
        try {
            const oauth2Client = new OAuth2Client(
                googleConfig.clientId,
                googleConfig.clientSecret,
                googleConfig.redirectUri
            );

            // ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô code ‡πÄ‡∏õ‡πá‡∏ô tokens
            const { tokens } = await oauth2Client.getToken(code);
            oauth2Client.setCredentials(tokens);

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google
            const userInfo = await this.getGoogleUserInfo(oauth2Client);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            const user = await this.findOrCreateUser(userInfo);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
            const isAdmin = await UserModel.checkAdmin(user.id);
            const tokenPayload = {
                id: user.id,
                email: user.email,
                first_name: user.first_name,
                is_admin: isAdmin,
                role: isAdmin ? 'admin' : 'user',
            };
            const accessToken = generateToken(tokenPayload);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last login
            await UserModel.updateLastLogin(user.id);

            const { password_hash, ...userResponseData } = user;

            return {
                accessToken,
                user: userResponseData,
                is_admin: isAdmin
            };
        } catch (error) {
            console.error('Google OAuth error:', error);
            throw new ApiError(httpStatusCodes.UNAUTHORIZED, 'Google authentication failed');
        }
    },

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google API
    async getGoogleUserInfo(oauth2Client) {
        try {
            const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
                headers: {
                    'Authorization': `Bearer ${oauth2Client.credentials.access_token}`,
                },
            });

            if (!response.ok) {
                throw new Error('Failed to fetch user info from Google');
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching Google user info:', error);
            throw new Error('Failed to get user information from Google');
        }
    },

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    async findOrCreateUser(googleUserInfo) {
        console.log('üîç findOrCreateUser called with:', googleUserInfo);
        
        if (!googleUserInfo || !googleUserInfo.email) {
            throw new Error('Invalid Google user info: missing email');
        }
        
        // Google user info ‡∏≠‡∏≤‡∏à‡∏°‡∏µ 'id' ‡∏´‡∏£‡∏∑‡∏≠ 'sub' field
        const { email, given_name, family_name, picture, sub, id } = googleUserInfo;
        const googleId = sub || id; // ‡πÉ‡∏ä‡πâ sub ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ id
        
        console.log('üîç Extracted Google ID:', { sub, id, googleId });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        console.log('üîç Looking for user with email:', email);
        let user = await UserModel.findByEmail(email);
        console.log('üîç User found:', user);

        if (user) {
            console.log('üîç Existing user found, checking google_id...');
            console.log('üîç Current google_id:', user.google_id);
            console.log('üîç New google_id from Google:', googleId);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google ID ‡πÅ‡∏•‡∏∞ profile picture ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            const updates = {};
            if (!user.google_id) {
                updates.google_id = googleId;
            }
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ profile_picture_url ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Google
            if (!user.profile_picture_url) {
                updates.profile_picture_url = picture;
            }

            if (Object.keys(updates).length > 0) {
                console.log('üîç Updating user with initial Google data:', updates);
                try {
                    await UserModel.update(user.id, updates);
                    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                    user = await UserModel.findByEmail(email);
                    console.log('üîç Updated user data:', user);
                } catch (error) {
                    console.error('‚ùå Error updating user with initial Google data:', error);
                    throw error;
                }
            } else {
                console.log('üîç User data is already linked with Google');
            }
            return user;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        console.log('üîç Creating new user');
        const userData = {
            email,
            username: email.split('@')[0] + '_' + Math.random().toString(36).substr(2, 5), // Generate unique username
            first_name: given_name || '',
            last_name: family_name || '',
            profile_picture_url: picture,
            google_id: googleId,
            email_verified_at: new Date().toISOString(), // Google email ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            is_active: true
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á password hash ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ password ‡∏ô‡∏µ‡πâ)
        const randomPassword = Math.random().toString(36).slice(-10);
        userData.password_hash = await hashPassword(randomPassword);

        console.log('üîç User data to create:', userData);
        try {
            const newUser = await UserModel.create(userData);
                       console.log('üîç New user created:', newUser);
           console.log('üîç New user verification status:', newUser.id_verification_status);
           return newUser;
        } catch (error) {
            console.error('‚ùå Error creating user:', error);
            throw error;
        }
    },

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google ID token (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile apps)
    async verifyIdToken(idToken) {
        try {
            const client = new OAuth2Client(googleConfig.clientId);
            const ticket = await client.verifyIdToken({
                idToken,
                audience: googleConfig.clientId
            });

            const payload = ticket.getPayload();
            return payload;
        } catch (error) {
            console.error('Google ID token verification error:', error);
            throw new ApiError(httpStatusCodes.UNAUTHORIZED, 'Invalid Google ID token');
        }
    }
};

export default googleAuthService;
